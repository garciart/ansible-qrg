---
# Use different variables to get the name of the Ansible user
#
# Remember, the user running Ansible on the control node may be different
# than the user running the Python or PowerShell scripts on the remote node
#
# Usages:
# - ansible-playbook get_usernames.yml
# - ansible-playbook get_usernames.yml -Kk
# - ansible-playbook get_usernames.yml -u john.doe
- name: Get usernames
  hosts: managed_node_1
  gather_facts: true
  tasks:
    - name: Show the values of different username variables
      ansible.builtin.debug:
        msg:
          # Get the name of the user running the Ansible executable on the control node
          - "lookup('env', 'LOGNAME') = {{ lookup('env', 'LOGNAME') | default('undefined', true) }}"
          # Get the name of the remote user running the Ansible scripts
          # You must set 'gather_facts' to a truthy value or omit it (its default value is true)
          # Note - the user will be 'root' if 'become' is a truthy value
          - "ansible_env.USER = {{ ansible_env.USER | default('undefined', true) }}"
          - "ansible_user_id = {{ ansible_user_id | default('undefined', true) }}"
          - "ansible_user_uid = {{ ansible_user_id | default('undefined', true) }}"
          # Get the user defined through the CLI (-u option) or in the inventory or play
          # Note - 'ansible_user' (preferred) and 'ansible_ssh_user' point to the same value
          - "ansible_user = {{ ansible_user | default('undefined', true) }}"
          - "ansible_ssh_user = {{ ansible_ssh_user | default('undefined', true) }}"
          # FYI, the password is stored in the 'ansible_password' variable
...
# code: language=ansible
# vi: set noai nu ts=2 sw=2 sts=2 sta et:
