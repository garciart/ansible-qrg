---
# Read data from files into a YAML variable
# Usage: ansible-playbook convert_file_data.yml
- name: Get file data
  hosts: control_node
  tasks:
    # - name: Read file
    #   ansible.builtin.slurp:
    #     src: data_files/planets_info.json
    #   register: result

    # - name: Decode and show result
    #   ansible.builtin.debug:
    #     msg: "{{ result.content | b64decode }}"

    # - name: Read data from a CSV file into a YAML list of dictionaries
    #   block:
    #     - name: Read file
    #       ansible.builtin.slurp:
    #         src: data_files/planets_info.csv
    #       register: file_content

    #     - name: Decode contents, format, and store in a variable
    #       ansible.builtin.set_fact:
    #         csv_lines: "{{ file_content.content | b64decode | split('\n') | select() }}"

    #     - name: Show lines
    #       ansible.builtin.debug:
    #         msg:
    #           - "{{ csv_lines }}"
    #           - "{{ csv_lines | type_debug }}"

    #     - name: Convert lines into nested list
    #       ansible.builtin.set_fact:
    #         csv_list: "{{ (csv_list | default([])) + [(item | split(','))] }}"
    #       with_items:
    #         - "{{ csv_lines }}"

    #     - name: Show list
    #       ansible.builtin.debug:
    #         msg:
    #           - "{{ csv_list }}"
    #           - "{{ csv_list | type_debug }}"

    #     - name: Get keys
    #       ansible.builtin.set_fact:
    #         csv_keys: "{{ csv_list[0] }}"

    #     - name: Show keys
    #       ansible.builtin.debug:
    #         msg:
    #           - "{{ csv_keys }}"
    #           - "{{ csv_keys | type_debug }}"

    #     - name: Combine data
    #       ansible.builtin.set_fact:
    #         planets: "{{ planets | default([]) + [dict(csv_keys | zip(item))] }}"
    #       loop: "{{ csv_list[1:] }}"

    #     - name: Show variable contents, type and single element
    #       ansible.builtin.debug:
    #         msg:
    #           - "{{ planets }}"
    #           - "{{ planets | type_debug }}"
    #           - "{{ planets[2] }}"

    - name: Read data from an INI file into a YAML variable
      block:
        - name: Read file
          ansible.builtin.slurp:
            src: data_files/planets_info.ini
            # src: /home/rgarcia/repos/flask-template/migrations/alembic.ini
          register: result

        - name: Decode contents, format, and store in a variable
          # Append an opening brace to the start of the text
          # Decode content
          # Remove any comments
          # Remove blank lines
          # Trim whitespace
          # Replace empty values with 'null' (moons=)
          # Convert comma-delimited values that are not in list-format to a list
          # (moons = "Phobos", "Deimos" to moons = ["Phobos", "Deimos"])
          # Enclose section data within braces
          # Replace '=' with ':'
          # Quote keys, including keys that hold objects ("mercury: {")
          # Quote values
          # Remove any double quoted strings (""Mercury"")
          # Unquote boolean and null values (true, false, and null)
          # Remove newlines between braces and data to avoid trailing commas
          # Replace newlines with commas
          # Append a closing brace to the end of the text
          ansible.builtin.set_fact:
            planets: >-
              {{
                '{' ~ (
                  result.content
                  | b64decode
                  | regex_replace('(^[;#]).*?(?=\n)', '', multiline=true)
                  | regex_replace('\n{2,}', '\n')
                  | trim
                  | regex_replace('=\n', '= null\n')
                  | regex_replace('=((\s*)([^\[])(.*)("\s*,)(.*)("\s*))\n', '=[\1]\n')
                  | regex_replace('(^\[)(.*)(\])([\S\s]*?(?=(^\[|\Z)))', '\2: {\4},', multiline=true)
                  | regex_replace('(\s*)=(\s*)', ':')
                  | regex_replace('([a-zA-Z_]+)(\s*)(:)', '"\1":')
                  | regex_replace('(:)(\s*)([a-zA-Z_]+)', ':"\3"')
                  | replace('""', '"')
                  | replace('"true"', 'true')
                  | replace('"false"', 'false')
                  | replace('"null"', 'null')
                  | regex_replace('{\n', '{')
                  | regex_replace('\n}', '}')
                  | regex_replace('\n', ', ')

                ) ~ '}'
              }}

        - name: Show variable contents, type and single element
          ansible.builtin.debug:
            msg:
              - "{{ planets }}"
              - "{{ planets | type_debug }}"
              # - "{{ planets['earth'] }}"

    # - name: Read data from an XML file into a YAML variable
    #   # Development note: You must install xmltodict in your virtual environment
    #   # before reading XML files
    #   block:
    #     - name: Read file
    #       ansible.builtin.slurp:
    #         src: data_files/planets_info.xml
    #       register: result

    #     - name: Decode contents and store in a variable
    #       ansible.builtin.set_fact:
    #         file_contents: "{{ result.content | b64decode }}"

    #     - name: Convert XML string to YAML
    #       ansible.builtin.set_fact:
    #         planets: "{{ file_contents | ansible.utils.from_xml | from_json }}"

    #     - name: Show variable contents, type and single element
    #       ansible.builtin.debug:
    #         msg:
    #           - "{{ planets }}"
    #           - "{{ planets | type_debug }}"
    #           - "{{ planets['planets']['earth'] }}"

    # - name: Read data from an JSON file into a YAML variable
    #   block:
    #     - name: Read file
    #       ansible.builtin.slurp:
    #         src: data_files/planets_info.json
    #       register: result

    #     - name: Decode contents and store in a variable
    #       ansible.builtin.set_fact:
    #         planets: "{{ result.content | b64decode | from_json }}"

    #     - name: Show variable contents, type and single element
    #       ansible.builtin.debug:
    #         msg:
    #           - "{{ planets }}"
    #           - "{{ planets | type_debug }}"
    #           - "{{ planets['planets']['earth'] }}"

    # - name: Read data from a YAML file into a YAML variable
    #   block:
    #     - name: Read file
    #       ansible.builtin.slurp:
    #         src: data_files/planets_info.yml
    #       register: result

    #     - name: Decode contents and store in a variable
    #       ansible.builtin.set_fact:
    #         planets: "{{ result.content | b64decode | from_yaml }}"

    #     - name: Show variable contents, type and single element
    #       ansible.builtin.debug:
    #         msg:
    #           - "{{ planets }}"
    #           - "{{ planets | type_debug }}"
    #           - "{{ planets['planets']['earth'] }}"
...
# code: language=ansible
# vi: set noai nu ts=2 sw=2 sts=2 sta et:
